1. Set up AWS EC2 server
1.1 Register yourself on AWS amazon
1.1.1 Select your region (Europe (Stockholm)eu-north-1)
1.2 Enter your AWS management console, select EC2
1.2.1 Select INSTANCES, launch INSTANCES
1.2.2 Select ubuntu Server 20.04 LTS
1.2.3 Select free tier eligible INSTANCE type
1.2.3.1 Configure INSTANCE details
1.2.3.2 In the ADD STORAGE configuration change storage size to 25
1.2.3.3 in the CONFIGURE SECURITY GROUP add rule for ALL TRAFFIC, the source is 0.0.0.0/0, ::/0
1.2.3.4 In the REVIEW INSTANCE LAUNCH generate private key pair, select the newly generated key pair and launch the INSTANCE


2. Connecting to server through putty
2.1 Download AWS key pair
2.1.1 Open it through puttyGen by importing the downloaded key
2.1.2 Save private key in ppk format
2.2 Open putty
2.2.1 In the hostname type ubuntu@ec2-13-49-231-231.eu-north-1.compute.amazonaws.com
2.2.2 In the SSH -> Auth -> Browse Choose your private key (ppk)
2.3 Click open in the putty session

///////////////////////////
EXTRA for part 2:
if server is already configured you can use following ways to connect to it:
In putty:
In the ip/domain you can choose: ec2-13-49-231-231.eu-north-1.compute.amazonaws.com or ubuntu@ec2-13-49-231-231.eu-north-1.compute.amazonaws.com
or 13.49.231.231 or coronaweather.tk
In the SSH -> Auth -> Browse Choose your private key (ppk)
LOGIN AS : ubuntu
//////////////////////////

3. Add other users to server
3.1 type: cd .ssh
3.2 Add other ssh keys to your putty session ( Mentors keys and teammate generated keys )
3.2.1 Edit the authorized keys
3.2.1.1 Type: cd .ssh
3.2.1.2 nano authorized_keys
3.2.1.3 add all keys to file and save them


4. Setting up the server
4.1 Setting up general server settings
4.1.1 Running command : htop will show you how much memory you have
4.1.2 Add 2 GB of virtual memory
4.1.2.1 Type: sudo fallocate -l 2G /swapfile
4.1.2.2 Type: sudo chmod 600 /swapfile
4.1.2.3 Type: sudo mkswap /swapfile
4.1.2.4 Type: sudo swapon /swapfile
4.1.2.5 Type: sudo swapon -show
4.1.2.6 Type: echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
4.1.2.7 Run htop command again to see that you have succesfully added 2GB of virtual memory
4.2 Install dependencies
4.2.1 Type: sudo apt-get update
4.2.2 Type: sudo apt-get upgrade
4.2.3 Type: sudo apt-get install openjdk-11-jre openjdk-11-jdk


5. Create .gitlab-ci.yml for backend repository
5.1 Its configuration could be found in .gitlab-ci.yml file
5.2 Most important thing is to write your tags and replace names of files with your file names


6. Install Gitlab Runner for backend
6.1 Go back to your putty session and type following commands
6.1.1 curl -LJO https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_runner_amd64.deb
6.1.2 sudo dpkg -i gitlab-runner_amd64.deb
6.2 gitlab runner registration
6.2.1 Type: sudo gitlab-runner register
You can find the info used below in gitlab-> settings-> CI/CD-> Runners
6.2.2 Type: https://gitlab.cs.ttu.ee/
6.2.3 In enter the token section type: 9FVsyHqjdvGJWjqryA1g
6.2.4 In tags type: Forecast ( We specify them in gitlab-ci.yml file )
6.2.5 In next section type: shell
6.3 Fix gitlab runner default bugs
6.3.1 Type: sudo su gitlab-runner
6.3.2 Type : nano /home/gitlab-runner/.bash_logout
6.3.3 Comment out the code in this file
6.3.4 Exit file
6.3.5 Type : exit
6.4 Start the runner
6.4.1 Type : sudo service gitlab-runner start
6.4.2 Type : sudo service gitlab-runner status
6.4.3 Push backend
6.5 Test jar file
6.5.1 Type: sudo su gitlab-runner
6.5.2 Type : cd /home/gitlab-runner/
6.5.3 Type : cd api-deployment/
6.5.4 Type : ls -la
Jar file below could be find in your project backend repository->gradle->build->libs->jar file
6.5.5 Type: java -jar backend-0.0.1-SNAPSHOT.jar
6.5.6 Type: exit


7.1 Creating service which will run our jar file
7.1.1 Type: cd /etc/systemd/system/
7.1.2 Type: sudo touch forecast.service
7.1.3 Type: sudo nano forecast.service
File content should look like this :
///////////////////////////////////////
[Unit]
Description=dashboard forecast service
After=network.target

[Service]
Type=simple
User=gitlab-runner
WorkingDirectory=/home/gitlab-runner/api-deployment
ExecStart=/usr/bin/java -jar backend-0.0.1-SNAPSHOT.jar
Restart=on-abort

[Install]
WantedBy=multi-user.target
/////////////////////////////////////
7.2 Run created service file
7.2.1 Type: sudo systemctl daemon-reload
7.2.2 Type: sudo systemctl enable forecast
7.2.3 Type: sudo service forecast restart
7.2.4 Type: sudo service forecast status
7.3 Allow to run service without password
7.3.1 Type: sudo visudo
7.3.2 Add to the end of the file following line : gitlab-runner ALL = NOPASSWD: /usr/sbin/service forecast *
7.3.3 exit file


8. Create gitlab-ci.yml for Frontend
8.1 in package.json file replace "build" line with:
8.1.1 "build": "ng build â€”prod",
8.2 Its configuration could be found in .gitlab-ci.yml file in the frontend repository
8.3 Most important thing is to write your tags and replace names of files with your file names


9. Front-end configuration
9.1 Install node and nginx
9.1.1 Type: sudo curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
9.1.2 Type: sudo apt-get install -y nodejs
9.1.3 Type: sudo apt-get install nginx
9.2 Configure nginx
9.2.1 Type: cd /etc/nginx/sites-available/
9.2.2 Type: sudo cp default Forecast
9.2.3 Type: sudo service nginx restart
9.2.4 Type: cd ..
9.2.5 Type: cd sites-enabled/
9.2.6 Type: sudo ln -s  /etc/nginx/sites-available/Forecast  /etc/nginx/sites-enabled/
9.2.7 Type: sudo rm default
9.2.8 Type: sudo nano Forecast
File should look like this :
//////////////////////////
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/front-deployment;

	location / {
		index index.html index.htm;
		if (!-e $request_filename){
		rewrite ^(.*)$ /index.html break;
		}
	}

	location /api/ {
		proxy_pass http://localhost:8080;
	}

}
//////////////////////////
9.2.9 Exit file
9.2.10 Type: sudo service nginx restart


10. Register gitlab-runner for frontend
10.1 Type:sudo gitlab-runner register
10.1.1 Type: https://gitlab.cs.ttu.ee/
10.1.2 Type: Pwy8Y9yYStxVZMS3jzXR
10.1.3 Tags type: Forecast
10.1.4 Type: shell
10.2 Display Frontend
10.2.1 Type: cd /var/www/
10.2.2 Type: sudo ln -s /home/gitlab-runner/front-deployment/ /var/www/front-deployment
10.2.3 sudo service nginx restart


11 Domain setup
11.1 Register on freenom.com
11.1.1 Type in the domain name you want : coronaweather
11.1.2 Get a tk or ml version of it for free
11.1.3 Select the period for the free subscription
11.2 Enter AWS management console, select  Route53
11.2.1 Create a hosted zone
11.2.2 Type the domain name : coronaweather.tk
11.3 In the AWS copy the given VALUE/ROUTE traffics
11.3.1 In freenom.com go to management tools -> Nameservers , select custom name servers
11.3.2 Put in the copied VALUE/ROUTE in the custom name servers
11.4 In AWS click CREATE RECORD, Routing policy : Simple routing
11.4.1 Define simple record, VALUE/ROUTE traffic to IP address or another value depending on the record type and insert the public IPv4 of your server (13.49.231.231)


12 Secure the domain
12.1 Go to your putty session
12.1.1 Type: cd
12.1.2 Type: sudo add-apt-repository ppa:certbot/certbot
12.1.3 Type: sudo apt install certbot python3-certbot-nginx
12.2 Type: sudo certbot --nginx
12.2.1 Enter your email (optionally)
12.2.2 Type: A (agree)
12.2.3 Type: N (no)
12.2.4 In "enter your domain" section type: coronaweather.tk
12.2.5 Type: 2
